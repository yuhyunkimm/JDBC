/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package myapp_lab.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class ProductRepository {
    // 싱글톤
    private Connection conn;

    // 의존성주입
    public ProductRepository(Connection conn) {
        this.conn = conn;
    }

    // DB에 Insert
    public void insert(String name, int price, int qty) throws SQLException {

        // 2. 버퍼 접근
        String sql = "insert into product(name, price, qty, created_at) values(?,?,?, now())";
        // PreparedStatement => 버퍼에 접근하는 class -> ? 문법을 지원 해준다
        PreparedStatement pstmt = conn.prepareStatement(sql); // sql 작성해서 넣으면 된다

        // 3. 물음표 완성
        // table을 보고 타입 지정
        pstmt.setString(1, "banana"); // parameterIndex : ? 의 순번(1번부터 시작) , 값
        pstmt.setInt(2, 1000); // parameterIndex : ? 의 순번 , 값
        pstmt.setInt(3, 30); // parameterIndex : ? 의 순번 , 값

        // 4. 전송(flush)
        // pstmt.addBatch(); 한번의 데이터베이스로 한번에 전송
        // pstmt.executeQuery(); 1,0,-1 으로 리턴 못찾으면 0리턴
        int result = pstmt.executeUpdate();

        // 5. 응답에 대한 처리
        if (result == 1) {
            System.out.println("insert 되었습니다");
        } else {
            System.out.println("insert 실패");
        }

        // 6. 최종 마무리
        // connection 종료 , stack에 띄워져 있는 것은 메인이 종료될 때 종료 메모리 관리를 할 필요가 없다
        pstmt.close();
    }

}
